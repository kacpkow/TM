{"ast":null,"code":"import _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/screens/partials/UploadGridModal.js\";\nimport React, { useState } from 'react';\nimport { ALERT_VARIANTS, API_URL } from '../../config/constants';\nimport { useAlert } from '../../contexts/Alert';\nimport useFetch from '../../hooks/useFetch';\nimport { Modal, Loading, Separator, Button } from '../../components';\nimport UploadModal from './UploadModal';\n\nvar UploadGridModal = function UploadGridModal(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      onSelect = _ref.onSelect;\n\n  var _useAlert = useAlert(),\n      addAlert = _useAlert.addAlert;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isUploadModal = _useState2[0],\n      setIsUploadModal = _useState2[1];\n\n  var getData = useFetch({\n    url: '/api/images/',\n    onMount: true,\n    onError: function onError() {\n      addAlert('Błąd podczas ładowania plików', ALERT_VARIANTS.danger);\n    }\n  });\n\n  var openModal = function openModal() {\n    return setIsUploadModal(true);\n  };\n\n  var closeModal = function closeModal() {\n    return setIsUploadModal(false);\n  };\n\n  return React.createElement(Loading, {\n    isActive: getData.isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: openModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Dodaj plik\"), React.createElement(Separator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), getData.response.images && React.createElement(\"div\", {\n    className: \"gallery\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, getData.response.images.map(function (item) {\n    return React.createElement(\"div\", {\n      key: item.id,\n      className: \"gallery__item\",\n      onClick: function onClick() {\n        return onSelect(API_URL + item.pic);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: API_URL + item.pic,\n      alt: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }));\n  }))), React.createElement(UploadModal, {\n    isOpen: isUploadModal,\n    onClose: closeModal,\n    onDone: function onDone() {\n      getData.fetch();\n      closeModal();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default UploadGridModal;","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/screens/partials/UploadGridModal.js"],"names":["React","useState","ALERT_VARIANTS","API_URL","useAlert","useFetch","Modal","Loading","Separator","Button","UploadModal","UploadGridModal","isOpen","onClose","onSelect","addAlert","isUploadModal","setIsUploadModal","getData","url","onMount","onError","danger","openModal","closeModal","isLoading","response","images","map","item","id","pic","fetch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,wBAAxC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SACEC,KADF,EACSC,OADT,EACkBC,SADlB,EAC6BC,MAD7B,QAEO,kBAFP;AAGA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,OAAmC;AAAA,MAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACpCV,QAAQ,EAD4B;AAAA,MACjDW,QADiD,aACjDA,QADiD;;AAAA,kBAEfd,QAAQ,CAAC,KAAD,CAFO;AAAA;AAAA,MAElDe,aAFkD;AAAA,MAEnCC,gBAFmC;;AAIzD,MAAMC,OAAO,GAAGb,QAAQ,CAAC;AACvBc,IAAAA,GAAG,EAAE,cADkB;AAEvBC,IAAAA,OAAO,EAAE,IAFc;AAGvBC,IAAAA,OAAO,EAAE,mBAAM;AACbN,MAAAA,QAAQ,CAAC,+BAAD,EAAkCb,cAAc,CAACoB,MAAjD,CAAR;AACD;AALsB,GAAD,CAAxB;;AAQA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,WAAMN,gBAAgB,CAAC,IAAD,CAAtB;AAAA,GAAlB;;AACA,MAAMO,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMP,gBAAgB,CAAC,KAAD,CAAtB;AAAA,GAAnB;;AAEA,SACE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEC,OAAO,CAACO,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEb,MAAf;AAAuB,IAAA,OAAO,EAAEC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEU,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAKGL,OAAO,CAACQ,QAAR,CAAiBC,MAAjB,IACC;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,OAAO,CAACQ,QAAR,CAAiBC,MAAjB,CAAwBC,GAAxB,CAA4B,UAAAC,IAAI;AAAA,WAC/B;AACE,MAAA,GAAG,EAAEA,IAAI,CAACC,EADZ;AAEE,MAAA,SAAS,EAAC,eAFZ;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMhB,QAAQ,CAACX,OAAO,GAAG0B,IAAI,CAACE,GAAhB,CAAd;AAAA,OAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE;AAAK,MAAA,GAAG,EAAE5B,OAAO,GAAG0B,IAAI,CAACE,GAAzB;AAA8B,MAAA,GAAG,EAAEF,IAAI,CAACC,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CAD+B;AAAA,GAAhC,CADH,CANJ,CADF,EAqBE,oBAAC,WAAD;AACE,IAAA,MAAM,EAAEd,aADV;AAEE,IAAA,OAAO,EAAEQ,UAFX;AAGE,IAAA,MAAM,EAAE,kBAAM;AACZN,MAAAA,OAAO,CAACc,KAAR;AACAR,MAAAA,UAAU;AACX,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF;AAgCD,CA/CD;;AAiDA,eAAeb,eAAf","sourcesContent":["import React, { useState } from 'react';\nimport { ALERT_VARIANTS, API_URL } from '../../config/constants';\nimport { useAlert } from '../../contexts/Alert';\nimport useFetch from '../../hooks/useFetch';\nimport {\n  Modal, Loading, Separator, Button\n} from '../../components';\nimport UploadModal from './UploadModal';\n\nconst UploadGridModal = ({ isOpen, onClose, onSelect }) => {\n  const { addAlert } = useAlert();\n  const [isUploadModal, setIsUploadModal] = useState(false);\n\n  const getData = useFetch({\n    url: '/api/images/',\n    onMount: true,\n    onError: () => {\n      addAlert('Błąd podczas ładowania plików', ALERT_VARIANTS.danger);\n    }\n  });\n\n  const openModal = () => setIsUploadModal(true);\n  const closeModal = () => setIsUploadModal(false);\n\n  return (\n    <Loading isActive={getData.isLoading}>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <Button onClick={openModal}>Dodaj plik</Button>\n\n        <Separator />\n\n        {getData.response.images && (\n          <div className=\"gallery\">\n            {getData.response.images.map(item => (\n              <div\n                key={item.id}\n                className=\"gallery__item\"\n                onClick={() => onSelect(API_URL + item.pic)}\n              >\n                <img src={API_URL + item.pic} alt={item.id} />\n              </div>\n            ))}\n          </div>\n        )}\n      </Modal>\n\n      <UploadModal\n        isOpen={isUploadModal}\n        onClose={closeModal}\n        onDone={() => {\n          getData.fetch();\n          closeModal();\n        }}\n      />\n    </Loading>\n  );\n};\n\nexport default UploadGridModal;\n"]},"metadata":{},"sourceType":"module"}