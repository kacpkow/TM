{"ast":null,"code":"import _regeneratorRuntime from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/screens/partials/UploadModal.js\";\nimport React, { useState } from 'react';\nimport { ALERT_VARIANTS, MODAL_SIZES } from '../../config/constants';\nimport { useAlert } from '../../contexts/Alert';\nimport useForm from '../../hooks/useForm';\nimport useFetch from '../../hooks/useFetch';\nimport { Button, Field, Modal } from '../../components';\n\nvar UploadModal = function UploadModal(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      onDone = _ref.onDone;\n\n  var _useAlert = useAlert(),\n      addAlert = _useAlert.addAlert;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      file = _useState2[0],\n      setFile = _useState2[1];\n\n  var _useForm = useForm(),\n      field = _useForm.field,\n      fields = _useForm.fields,\n      setErrors = _useForm.setErrors,\n      setFields = _useForm.setFields;\n\n  var uploadFile = useFetch({\n    url: '/api/upload_image/',\n    contentType: 'multipart/form-data',\n    method: 'post',\n    onFetch: function onFetch() {\n      if (onDone) {\n        onDone();\n      }\n\n      setFields({});\n      setFile([]);\n      addAlert('Plik został wgrany pomyślnie', ALERT_VARIANTS.success);\n    },\n    onError: function onError(error) {\n      addAlert('Błąd podczas dodawania pliku', ALERT_VARIANTS.danger);\n      setErrors(error.response.data);\n    }\n  });\n\n  var handleSubmit =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              data = new FormData();\n              data.append('pic', file);\n              data.append('pic_text', fields.pic_text || '');\n              uploadFile.fetch({\n                data: data\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleFile = function handleFile(e) {\n    setFile(e.target.files[0]);\n  };\n\n  return React.createElement(Modal, {\n    isOpen: isOpen,\n    size: MODAL_SIZES.small,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Field, Object.assign({\n    type: \"input\",\n    label: \"Nazwa pliku\"\n  }, field('pic_text'), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), React.createElement(Field, {\n    type: \"file\",\n    label: \"Dodaj plik\",\n    error: field('pic').error,\n    onChange: handleFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    isLoading: uploadFile.loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Dodaj plik\")));\n};\n\nexport default UploadModal;","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/screens/partials/UploadModal.js"],"names":["React","useState","ALERT_VARIANTS","MODAL_SIZES","useAlert","useForm","useFetch","Button","Field","Modal","UploadModal","isOpen","onClose","onDone","addAlert","file","setFile","field","fields","setErrors","setFields","uploadFile","url","contentType","method","onFetch","success","onError","error","danger","response","data","handleSubmit","e","preventDefault","FormData","append","pic_text","fetch","handleFile","target","files","small","loading"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { ALERT_VARIANTS, MODAL_SIZES } from '../../config/constants';\nimport { useAlert } from '../../contexts/Alert';\nimport useForm from '../../hooks/useForm';\nimport useFetch from '../../hooks/useFetch';\nimport { Button, Field, Modal } from '../../components';\n\nconst UploadModal = ({ isOpen, onClose, onDone }) => {\n  const { addAlert } = useAlert();\n  const [file, setFile] = useState([]);\n  const {\n    field, fields, setErrors, setFields\n  } = useForm();\n\n  const uploadFile = useFetch({\n    url: '/api/upload_image/',\n    contentType: 'multipart/form-data',\n    method: 'post',\n    onFetch: () => {\n      if (onDone) {\n        onDone();\n      }\n\n      setFields({});\n      setFile([]);\n\n      addAlert('Plik został wgrany pomyślnie', ALERT_VARIANTS.success);\n    },\n    onError: (error) => {\n      addAlert('Błąd podczas dodawania pliku', ALERT_VARIANTS.danger);\n      setErrors(error.response.data);\n    }\n  });\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const data = new FormData();\n\n    data.append('pic', file);\n    data.append('pic_text', fields.pic_text || '');\n\n    uploadFile.fetch({\n      data\n    });\n  };\n\n  const handleFile = (e) => {\n    setFile(e.target.files[0]);\n  };\n\n  return (\n    <Modal isOpen={isOpen} size={MODAL_SIZES.small} onClose={onClose}>\n      <form onSubmit={handleSubmit}>\n        <Field type=\"input\" label=\"Nazwa pliku\" {...field('pic_text')} />\n        <Field type=\"file\" label=\"Dodaj plik\" error={field('pic').error} onChange={handleFile} />\n\n        <Button type=\"submit\" isLoading={uploadFile.loading}>\n          Dodaj plik\n        </Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default UploadModal;\n"]},"metadata":{},"sourceType":"module"}