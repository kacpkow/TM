{"ast":null,"code":"import _objectWithoutProperties from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/components/Field/index.js\";\nimport React from 'react';\nimport nanoid from 'nanoid';\nimport Input from '../Input';\nimport './style.scss';\nexport default (function (_ref) {\n  var label = _ref.label,\n      error = _ref.error,\n      rest = _objectWithoutProperties(_ref, [\"label\", \"error\"]);\n\n  var id = nanoid();\n  return React.createElement(\"label\", {\n    className: \"field\",\n    htmlFor: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, label && React.createElement(\"span\", {\n    className: \"field__text \".concat(error ? 'field__text--error' : ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, label), React.createElement(Input, Object.assign({\n    id: id\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  })));\n});","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/components/Field/index.js"],"names":["React","nanoid","Input","label","error","rest","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,OAAO,cAAP;AAEA,gBAAe,gBAA+B;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,KAAqB,QAArBA,KAAqB;AAAA,MAAXC,IAAW;;AAC5C,MAAMC,EAAE,GAAGL,MAAM,EAAjB;AAEA,SACE;AAAO,IAAA,SAAS,EAAC,OAAjB;AAAyB,IAAA,OAAO,EAAEK,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,IAAI;AAAM,IAAA,SAAS,wBAAiBC,KAAK,GAAG,oBAAH,GAA0B,EAAhD,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsED,KAAtE,CADZ,EAGE,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAEG;AAAX,KAAmBD,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,CADF;AAOD,CAVD","sourcesContent":["import React from 'react';\nimport nanoid from 'nanoid';\nimport Input from '../Input';\n\nimport './style.scss';\n\nexport default ({ label, error, ...rest }) => {\n  const id = nanoid();\n\n  return (\n    <label className=\"field\" htmlFor={id}>\n      {label && <span className={`field__text ${error ? 'field__text--error' : ''}`}>{label}</span>}\n\n      <Input id={id} {...rest} />\n    </label>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}