{"ast":null,"code":"import _objectWithoutProperties from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/components/SvgCanvas/Canvas.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { useGesture } from 'react-with-gesture';\nimport EditorContext from '../../contexts/Editor';\nimport Shadow from './Shadow';\nimport Tag from './Tag';\nexport default (function () {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      shadow = _useState2[0],\n      setShadow = _useState2[1];\n\n  var _useContext = useContext(EditorContext),\n      items = _useContext.items,\n      updateItem = _useContext.updateItem,\n      focus = _useContext.focus,\n      setFocus = _useContext.setFocus;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      drag = _useState4[0],\n      setDrag = _useState4[1];\n\n  useEffect(function () {\n    if (!focus) {\n      setShadow(null);\n    }\n  }, [focus]);\n  var bind = useGesture(function (e) {\n    var _e$args = _slicedToArray(e.args, 3),\n        id = _e$args[0],\n        prevX = _e$args[1],\n        prevY = _e$args[2],\n        delta = e.delta,\n        target = e.target,\n        direction = e.direction;\n\n    updateItem(id, {\n      params: {\n        x: prevX + delta[0],\n        y: prevY + delta[1]\n      }\n    });\n    setDrag(direction.some(function (item) {\n      return item !== 0;\n    }));\n    setShadow(target.getBoundingClientRect());\n  });\n\n  var handleRotate = function handleRotate() {\n    alert('Rotate!'); // Math.atan2(e.pageX - elementCenterX, -(e.pageY - elementCenterY)) * (180 / Math.PI);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Tag, {\n    as: \"svg\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    className: \"canvas\",\n    width: \"600\",\n    height: \"400\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, items.map(function (_ref) {\n    var id = _ref.id,\n        params = _ref.params,\n        editable = _ref.editable,\n        rest = _objectWithoutProperties(_ref, [\"id\", \"params\", \"editable\"]);\n\n    return React.createElement(Tag, Object.assign({\n      as: \"g\",\n      key: id,\n      onClick: function onClick() {\n        if (!drag) {\n          setFocus(id);\n        }\n      },\n      className: \"drag\",\n      style: {\n        fill: params.fill,\n        fontSize: params.fontSize,\n        transform: \"translate(\".concat(params.x, \"px, \").concat(params.y, \"px) rotate(\").concat(params.rotate, \"deg)\")\n      }\n    }, bind(id, params.x, params.y), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Tag, Object.assign({}, rest, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  })));\n});","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/components/SvgCanvas/Canvas.js"],"names":["React","useContext","useState","useEffect","useGesture","EditorContext","Shadow","Tag","shadow","setShadow","items","updateItem","focus","setFocus","drag","setDrag","bind","e","args","id","prevX","prevY","delta","target","direction","params","x","y","some","item","getBoundingClientRect","handleRotate","alert","map","editable","rest","fill","fontSize","transform","rotate"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport { useGesture } from 'react-with-gesture';\nimport EditorContext from '../../contexts/Editor';\nimport Shadow from './Shadow';\nimport Tag from './Tag';\n\nexport default () => {\n  const [shadow, setShadow] = useState(null);\n  const {\n    items, updateItem, focus, setFocus\n  } = useContext(EditorContext);\n  const [drag, setDrag] = useState(false);\n\n  useEffect(() => {\n    if (!focus) {\n      setShadow(null);\n    }\n  }, [focus]);\n\n  const bind = useGesture((e) => {\n    const {\n      args: [id, prevX, prevY],\n      delta,\n      target,\n      direction\n    } = e;\n\n    updateItem(id, {\n      params: {\n        x: prevX + delta[0],\n        y: prevY + delta[1]\n      }\n    });\n\n    setDrag(direction.some(item => item !== 0));\n\n    setShadow(target.getBoundingClientRect());\n  });\n\n  const handleRotate = () => {\n    alert('Rotate!');\n    // Math.atan2(e.pageX - elementCenterX, -(e.pageY - elementCenterY)) * (180 / Math.PI);\n  };\n\n  return (\n    <>\n      {/* <Shadow coords={shadow} handleRotate={handleRotate} /> */}\n\n      <Tag\n        as=\"svg\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        className=\"canvas\"\n        width=\"600\"\n        height=\"400\"\n      >\n        {items.map(({\n          id, params, editable, ...rest\n        }) => (\n          <Tag\n            as=\"g\"\n            key={id}\n            onClick={() => {\n              if (!drag) {\n                setFocus(id);\n              }\n            }}\n            className=\"drag\"\n            style={{\n              fill: params.fill,\n              fontSize: params.fontSize,\n              transform: `translate(${params.x}px, ${params.y}px) rotate(${params.rotate}deg)`\n            }}\n            {...bind(id, params.x, params.y)}\n          >\n            <Tag {...rest} />\n          </Tag>\n        ))}\n      </Tag>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}