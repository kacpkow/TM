{"ast":null,"code":"import _regeneratorRuntime from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/views/partials/UploadGridModal.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AlertContext from '../../contexts/Alert';\nimport Modal from '../../components/Modal';\nimport Loading from '../../components/Loading';\nimport Separator from '../../components/Separator';\nimport Button from '../../components/Button';\nimport UploadModal from './UploadModal';\nimport { ALERT_VARIANTS } from '../../config/constants';\nexport default (function (_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      onSelect = _ref.onSelect;\n\n  var _AlertContext = AlertContext(),\n      createAlert = _AlertContext.createAlert;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isModal = _useState4[0],\n      setIsModal = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      items = _useState6[0],\n      setItems = _useState6[1];\n\n  var openModal = function openModal() {\n    return setIsModal(true);\n  };\n\n  var closeModal = function closeModal() {\n    return setIsModal(false);\n  };\n\n  var fetchList =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var _ref3, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('https://tk.produ.pl/upload');\n\n            case 3:\n              _ref3 = _context.sent;\n              data = _ref3.data;\n              setItems(data);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              createAlert(\"B\\u0142\\u0105d podczas \\u0142adowania plik\\xF3w \".concat(String.fromCodePoint(0x26a0)), ALERT_VARIANTS.danger);\n\n            case 11:\n              setIsLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function fetchList() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    fetchList();\n  }, []);\n  return React.createElement(Loading, {\n    isActive: isLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isOpen: isOpen,\n    onClose: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: openModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Dodaj plik\"), React.createElement(Separator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"gallery\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, items.map(function (item) {\n    return React.createElement(\"div\", {\n      key: item.id,\n      className: \"gallery__item\",\n      onClick: function onClick() {\n        return onSelect(item.url);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: item.url,\n      alt: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }))), React.createElement(UploadModal, {\n    isOpen: isModal,\n    onClose: closeModal,\n    onDone: function onDone() {\n      fetchList();\n      closeModal();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/views/partials/UploadGridModal.js"],"names":["React","useState","useEffect","axios","AlertContext","Modal","Loading","Separator","Button","UploadModal","ALERT_VARIANTS","isOpen","onClose","onSelect","createAlert","isLoading","setIsLoading","isModal","setIsModal","items","setItems","openModal","closeModal","fetchList","get","data","String","fromCodePoint","danger","map","item","id","url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AlertContext from '../../contexts/Alert';\nimport Modal from '../../components/Modal';\nimport Loading from '../../components/Loading';\nimport Separator from '../../components/Separator';\nimport Button from '../../components/Button';\nimport UploadModal from './UploadModal';\nimport { ALERT_VARIANTS } from '../../config/constants';\n\nexport default ({ isOpen, onClose, onSelect }) => {\n  const { createAlert } = AlertContext();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModal, setIsModal] = useState(false);\n  const [items, setItems] = useState([]);\n\n  const openModal = () => setIsModal(true);\n  const closeModal = () => setIsModal(false);\n\n  const fetchList = async () => {\n    try {\n      const { data } = await axios.get('https://tk.produ.pl/upload');\n\n      setItems(data);\n    } catch (ex) {\n      createAlert(\n        `Błąd podczas ładowania plików ${String.fromCodePoint(0x26a0)}`,\n        ALERT_VARIANTS.danger\n      );\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchList();\n  }, []);\n\n  return (\n    <Loading isActive={isLoading}>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <Button onClick={openModal}>Dodaj plik</Button>\n\n        <Separator />\n\n        <div className=\"gallery\">\n          {items.map(item => (\n            <div key={item.id} className=\"gallery__item\" onClick={() => onSelect(item.url)}>\n              <img src={item.url} alt={item.id} />\n            </div>\n          ))}\n        </div>\n      </Modal>\n\n      <UploadModal\n        isOpen={isModal}\n        onClose={closeModal}\n        onDone={() => {\n          fetchList();\n          closeModal();\n        }}\n      />\n    </Loading>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}