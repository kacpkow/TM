{"ast":null,"code":"var _jsxFileName = \"/home/kacper/Pulpit/tk-new-3/tk-pro-master/src/components/SvgCanvas/Options.js\";\nimport React, { useContext } from 'react';\nimport _ from 'lodash';\nimport EditorContext from '../../contexts/Editor';\nimport Field from '../Field';\nimport Modal from '../Modal';\nimport Button from '../Button';\nimport { MODAL_SIZES, BUTTON_SIZES } from '../../config/constants';\nexport default (function () {\n  var _useContext = useContext(EditorContext),\n      items = _useContext.items,\n      updateItem = _useContext.updateItem,\n      focus = _useContext.focus,\n      setFocus = _useContext.setFocus;\n\n  var item = items.find(function (element) {\n    return element.id === focus;\n  });\n\n  var handleInput = function handleInput(_ref) {\n    var _ref$target = _ref.target,\n        name = _ref$target.name,\n        value = _ref$target.value;\n    var preparedValue = _.isEmpty(value) || _.isNaN(Number(value)) ? value : Number(value);\n    updateItem(item.id, _.set({}, name, preparedValue));\n  };\n\n  return focus ? React.createElement(Modal, {\n    isOpen: true,\n    size: MODAL_SIZES.small,\n    onClose: function onClose() {\n      return setFocus(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, item.editable.map(function (_ref2) {\n    var label = _ref2.label,\n        field = _ref2.field,\n        type = _ref2.type;\n    return React.createElement(Field, {\n      label: label,\n      type: type,\n      name: field,\n      value: _.get(item, field),\n      onChange: handleInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  })), React.createElement(Button, {\n    size: BUTTON_SIZES.medium,\n    onClick: function onClick() {\n      return setFocus(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Zamknij \\xD7\")) : null;\n});","map":{"version":3,"sources":["/home/kacper/Pulpit/tk-new-3/tk-pro-master/src/components/SvgCanvas/Options.js"],"names":["React","useContext","_","EditorContext","Field","Modal","Button","MODAL_SIZES","BUTTON_SIZES","items","updateItem","focus","setFocus","item","find","element","id","handleInput","target","name","value","preparedValue","isEmpty","isNaN","Number","set","small","editable","map","label","field","type","get","medium"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,wBAA1C;AAEA,gBAAe,YAAM;AAAA,oBAGfP,UAAU,CAACE,aAAD,CAHK;AAAA,MAEjBM,KAFiB,eAEjBA,KAFiB;AAAA,MAEVC,UAFU,eAEVA,UAFU;AAAA,MAEEC,KAFF,eAEEA,KAFF;AAAA,MAESC,QAFT,eAESA,QAFT;;AAKnB,MAAMC,IAAI,GAAGJ,KAAK,CAACK,IAAN,CAAW,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACC,EAAR,KAAeL,KAAnB;AAAA,GAAlB,CAAb;;AAEA,MAAMM,WAAW,GAAG,SAAdA,WAAc,OAAiC;AAAA,2BAA9BC,MAA8B;AAAA,QAApBC,IAAoB,eAApBA,IAAoB;AAAA,QAAdC,KAAc,eAAdA,KAAc;AACnD,QAAMC,aAAa,GAAGnB,CAAC,CAACoB,OAAF,CAAUF,KAAV,KAAoBlB,CAAC,CAACqB,KAAF,CAAQC,MAAM,CAACJ,KAAD,CAAd,CAApB,GAA6CA,KAA7C,GAAqDI,MAAM,CAACJ,KAAD,CAAjF;AAEAV,IAAAA,UAAU,CAACG,IAAI,CAACG,EAAN,EAAUd,CAAC,CAACuB,GAAF,CAAM,EAAN,EAAUN,IAAV,EAAgBE,aAAhB,CAAV,CAAV;AACD,GAJD;;AAMA,SAAOV,KAAK,GACV,oBAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAc,IAAA,IAAI,EAAEJ,WAAW,CAACmB,KAAhC;AAAuC,IAAA,OAAO,EAAE;AAAA,aAAMd,QAAQ,CAAC,KAAD,CAAd;AAAA,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACc,QAAL,CAAcC,GAAd,CAAkB;AAAA,QAAGC,KAAH,SAAGA,KAAH;AAAA,QAAUC,KAAV,SAAUA,KAAV;AAAA,QAAiBC,IAAjB,SAAiBA,IAAjB;AAAA,WACjB,oBAAC,KAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,IAAI,EAAEE,IAFR;AAGE,MAAA,IAAI,EAAED,KAHR;AAIE,MAAA,KAAK,EAAE5B,CAAC,CAAC8B,GAAF,CAAMnB,IAAN,EAAYiB,KAAZ,CAJT;AAKE,MAAA,QAAQ,EAAEb,WALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADiB;AAAA,GAAlB,CADH,CADF,EAaE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAET,YAAY,CAACyB,MAA3B;AAAmC,IAAA,OAAO,EAAE;AAAA,aAAMrB,QAAQ,CAAC,KAAD,CAAd;AAAA,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbF,CADU,GAkBR,IAlBJ;AAmBD,CAhCD","sourcesContent":["import React, { useContext } from 'react';\nimport _ from 'lodash';\nimport EditorContext from '../../contexts/Editor';\nimport Field from '../Field';\nimport Modal from '../Modal';\nimport Button from '../Button';\nimport { MODAL_SIZES, BUTTON_SIZES } from '../../config/constants';\n\nexport default () => {\n  const {\n    items, updateItem, focus, setFocus\n  } = useContext(EditorContext);\n\n  const item = items.find(element => element.id === focus);\n\n  const handleInput = ({ target: { name, value } }) => {\n    const preparedValue = _.isEmpty(value) || _.isNaN(Number(value)) ? value : Number(value);\n\n    updateItem(item.id, _.set({}, name, preparedValue));\n  };\n\n  return focus ? (\n    <Modal isOpen size={MODAL_SIZES.small} onClose={() => setFocus(false)}>\n      <form>\n        {item.editable.map(({ label, field, type }) => (\n          <Field\n            label={label}\n            type={type}\n            name={field}\n            value={_.get(item, field)}\n            onChange={handleInput}\n          />\n        ))}\n      </form>\n\n      <Button size={BUTTON_SIZES.medium} onClick={() => setFocus(false)}>\n        Zamknij &times;\n      </Button>\n    </Modal>\n  ) : null;\n};\n"]},"metadata":{},"sourceType":"module"}