{"ast":null,"code":"import _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/kacper/Pulpit/prg/TK/tk-pro/src/components/Table/index.js\";\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport * as Icon from 'react-feather';\nimport Pagination from './Pagination';\nimport './style.scss';\n\nvar Table = function Table(_ref) {\n  var data = _ref.data,\n      columns = _ref.columns,\n      _ref$perPage = _ref.perPage,\n      perPage = _ref$perPage === void 0 ? 8 : _ref$perPage;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  if (!_.isArray(data)) {\n    console.log(data);\n    return null;\n  }\n\n  var totalPages = Math.ceil(data.length / perPage);\n\n  var limitItems = function limitItems(items) {\n    return items.slice(page * perPage).slice(0, perPage);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    className: \"table__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    className: \"table__head\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    className: \"table__row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, columns.map(function (_ref2) {\n    var label = _ref2.label;\n    return React.createElement(\"th\", {\n      key: label,\n      className: \"table__column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, label);\n  }))), React.createElement(\"tbody\", {\n    className: \"table__body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, limitItems(data).map(function (row) {\n    return React.createElement(\"tr\", {\n      key: row.id,\n      className: \"table__row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, columns.map(function (_ref3, index) {\n      var key = _ref3.key,\n          _ref3$empty = _ref3.empty,\n          empty = _ref3$empty === void 0 ? '-' : _ref3$empty,\n          format = _ref3.format;\n      return React.createElement(\"td\", {\n        key: \"\".concat(row.id, \"_\").concat(index),\n        className: \"table__column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, format ? format(row) : row[key] || empty);\n    }));\n  }))), data.length === 0 && React.createElement(\"div\", {\n    className: \"table__empty\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Icon.Database, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Brak danych\"))), totalPages > 1 && React.createElement(Pagination, {\n    totalPages: totalPages,\n    page: page,\n    onChange: setPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), page > 1 && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Strona \", page + 1, \" na \", totalPages));\n};\n\nexport default Table;","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/components/Table/index.js"],"names":["React","useState","_","Icon","Pagination","Table","data","columns","perPage","page","setPage","isArray","console","log","totalPages","Math","ceil","length","limitItems","items","slice","map","label","row","id","index","key","empty","format"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport _ from 'lodash';\nimport * as Icon from 'react-feather';\nimport Pagination from './Pagination';\n\nimport './style.scss';\n\nconst Table = ({ data, columns, perPage = 8 }) => {\n  const [page, setPage] = useState(0);\n\n  if (!_.isArray(data)) {\n    console.log(data);\n    return null;\n  }\n\n  const totalPages = Math.ceil(data.length / perPage);\n  const limitItems = items => items.slice(page * perPage).slice(0, perPage);\n\n  return (\n    <>\n      <div className=\"table\">\n        <table className=\"table__content\">\n          <thead className=\"table__head\">\n            <tr className=\"table__row\">\n              {columns.map(({ label }) => (\n                <th key={label} className=\"table__column\">\n                  {label}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody className=\"table__body\">\n            {limitItems(data).map(row => (\n              <tr key={row.id} className=\"table__row\">\n                {columns.map(({ key, empty = '-', format }, index) => (\n                  <td key={`${row.id}_${index}`} className=\"table__column\">\n                    {format ? format(row) : row[key] || empty}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        {data.length === 0 && (\n          <div className=\"table__empty\">\n            <Icon.Database />\n            <div>Brak danych</div>\n          </div>\n        )}\n      </div>\n\n      {totalPages > 1 && <Pagination totalPages={totalPages} page={page} onChange={setPage} />}\n\n      {page > 1 && (\n        <div>\n          Strona {page + 1} na {totalPages}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}