{"ast":null,"code":"import _regeneratorRuntime from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/kacper/Pulpit/prg/TK/tk-pro/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { API_URL } from '../config/constants';\nimport { useUser } from '../contexts/User';\n\nvar useFetch = function useFetch(_ref) {\n  var _ref$method = _ref.method,\n      method = _ref$method === void 0 ? 'get' : _ref$method,\n      url = _ref.url,\n      data = _ref.data,\n      headers = _ref.headers,\n      onMount = _ref.onMount,\n      onFetch = _ref.onFetch,\n      onError = _ref.onError;\n\n  var _useUser = useUser(),\n      user = _useUser.user;\n\n  var _useState = useState(onMount),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      response = _useState4[0],\n      setResponse = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      errors = _useState6[0],\n      setErrors = _useState6[1];\n\n  var Authorization = user ? \"Token \".concat(user.token) : undefined;\n\n  var fetch =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(opts) {\n      var _ref3, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return axios(_.merge({}, {\n                baseURL: API_URL,\n                headers: _objectSpread({}, headers, {\n                  Authorization: Authorization\n                }),\n                url: url,\n                method: method,\n                data: data\n              }, opts));\n\n            case 4:\n              _ref3 = _context.sent;\n              result = _ref3.data;\n              setResponse(result);\n\n              if (onFetch) {\n                onFetch(result);\n              }\n\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              setErrors(_.get(_context.t0, 'response.data'));\n\n              if (onError) {\n                onError(_context.t0);\n              }\n\n            case 14:\n              setLoading(false);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function fetch(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (onMount) {\n      fetch();\n    }\n  }, []);\n  return {\n    response: response,\n    errors: errors,\n    loading: loading,\n    fetch: fetch\n  };\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/home/kacper/Pulpit/prg/TK/tk-pro/src/hooks/useFetch.js"],"names":["useState","useEffect","axios","_","API_URL","useUser","useFetch","method","url","data","headers","onMount","onFetch","onError","user","loading","setLoading","response","setResponse","errors","setErrors","Authorization","token","undefined","fetch","opts","merge","baseURL","result","get"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAEX;AAAA,yBADJC,MACI;AAAA,MADJA,MACI,4BADK,KACL;AAAA,MADYC,GACZ,QADYA,GACZ;AAAA,MADiBC,IACjB,QADiBA,IACjB;AAAA,MADuBC,OACvB,QADuBA,OACvB;AAAA,MADgCC,OAChC,QADgCA,OAChC;AAAA,MADyCC,OACzC,QADyCA,OACzC;AAAA,MADkDC,OAClD,QADkDA,OAClD;;AAAA,iBACaR,OAAO,EADpB;AAAA,MACIS,IADJ,YACIA,IADJ;;AAAA,kBAG0Bd,QAAQ,CAACW,OAAD,CAHlC;AAAA;AAAA,MAGGI,OAHH;AAAA,MAGYC,UAHZ;;AAAA,mBAI4BhB,QAAQ,CAAC,EAAD,CAJpC;AAAA;AAAA,MAIGiB,QAJH;AAAA,MAIaC,WAJb;;AAAA,mBAKwBlB,QAAQ,CAAC,EAAD,CALhC;AAAA;AAAA,MAKGmB,MALH;AAAA,MAKWC,SALX;;AAOJ,MAAMC,aAAa,GAAGP,IAAI,mBAAYA,IAAI,CAACQ,KAAjB,IAA2BC,SAArD;;AAEA,MAAMC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZT,cAAAA,UAAU,CAAC,IAAD,CAAV;AADY;AAAA;AAAA,qBAIqBd,KAAK,CAClCC,CAAC,CAACuB,KAAF,CACE,EADF,EAEE;AACEC,gBAAAA,OAAO,EAAEvB,OADX;AAEEM,gBAAAA,OAAO,oBACFA,OADE;AAELW,kBAAAA,aAAa,EAAbA;AAFK,kBAFT;AAMEb,gBAAAA,GAAG,EAAHA,GANF;AAOED,gBAAAA,MAAM,EAANA,MAPF;AAQEE,gBAAAA,IAAI,EAAJA;AARF,eAFF,EAYEgB,IAZF,CADkC,CAJ1B;;AAAA;AAAA;AAIIG,cAAAA,MAJJ,SAIFnB,IAJE;AAqBVS,cAAAA,WAAW,CAACU,MAAD,CAAX;;AAEA,kBAAIhB,OAAJ,EAAa;AACXA,gBAAAA,OAAO,CAACgB,MAAD,CAAP;AACD;;AAzBS;AAAA;;AAAA;AAAA;AAAA;AA2BVR,cAAAA,SAAS,CAACjB,CAAC,CAAC0B,GAAF,cAAa,eAAb,CAAD,CAAT;;AAEA,kBAAIhB,OAAJ,EAAa;AACXA,gBAAAA,OAAO,aAAP;AACD;;AA/BS;AAkCZG,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAlCY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAALQ,KAAK;AAAA;AAAA;AAAA,KAAX;;AAqCAvB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,OAAJ,EAAa;AACXa,MAAAA,KAAK;AACN;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AACLP,IAAAA,QAAQ,EAARA,QADK;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLJ,IAAAA,OAAO,EAAPA,OAHK;AAILS,IAAAA,KAAK,EAALA;AAJK,GAAP;AAMD,CA5DD;;AA8DA,eAAelB,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { API_URL } from '../config/constants';\nimport { useUser } from '../contexts/User';\n\nconst useFetch = ({\n  method = 'get', url, data, headers, onMount, onFetch, onError\n}) => {\n  const { user } = useUser();\n\n  const [loading, setLoading] = useState(onMount);\n  const [response, setResponse] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  const Authorization = user ? `Token ${user.token}` : undefined;\n\n  const fetch = async (opts) => {\n    setLoading(true);\n\n    try {\n      const { data: result } = await axios(\n        _.merge(\n          {},\n          {\n            baseURL: API_URL,\n            headers: {\n              ...headers,\n              Authorization\n            },\n            url,\n            method,\n            data\n          },\n          opts\n        )\n      );\n\n      setResponse(result);\n\n      if (onFetch) {\n        onFetch(result);\n      }\n    } catch (error) {\n      setErrors(_.get(error, 'response.data'));\n\n      if (onError) {\n        onError(error);\n      }\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (onMount) {\n      fetch();\n    }\n  }, []);\n\n  return {\n    response,\n    errors,\n    loading,\n    fetch\n  };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}